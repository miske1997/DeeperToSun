[gd_scene load_steps=18 format=3 uid="uid://tu8vyh2aqc0u"]

[ext_resource type="Script" path="res://Scripts/Systems/room.gd" id="1_3m351"]
[ext_resource type="Resource" uid="uid://bh0n1m0wcw4pl" path="res://Data/Configs/Room/Test1.tres" id="2_je40i"]
[ext_resource type="Script" path="res://Scripts/Modules/spawner.gd" id="2_qi222"]
[ext_resource type="PackedScene" uid="uid://b054quigmbjh7" path="res://Scenes/UI/health.tscn" id="3_6gwo6"]
[ext_resource type="PackedScene" uid="uid://cl24kdwq1sx4o" path="res://Scenes/door.tscn" id="3_nixdo"]
[ext_resource type="Script" path="res://Scripts/Modules/enemy_builder.gd" id="3_ot5rb"]
[ext_resource type="Texture2D" uid="uid://er7ytppxb5us" path="res://Assets/Mape/Livada1.png" id="5_32dm8"]
[ext_resource type="PackedScene" uid="uid://b51ouytvbh0v2" path="res://Scenes/player.tscn" id="6_w54wr"]
[ext_resource type="PackedScene" uid="uid://blqml5o5saasv" path="res://Scenes/wave_serializer.tscn" id="7_huvsm"]
[ext_resource type="PackedScene" uid="uid://7uefqtjc5fu3" path="res://Scenes/room_serializer.tscn" id="9_ltcgh"]
[ext_resource type="PackedScene" uid="uid://jiwtmufujn2n" path="res://Prefabs/Enemies/shaman_gnome.tscn" id="10_ovxqh"]
[ext_resource type="PackedScene" uid="uid://bbov1aforaspi" path="res://Prefabs/Enemies/warrior_gnome.tscn" id="11_titot"]
[ext_resource type="PackedScene" uid="uid://7kt263aosrai" path="res://Prefabs/Enemies/runner_gnome.tscn" id="11_uesty"]
[ext_resource type="PackedScene" uid="uid://oopslrkimatw" path="res://Prefabs/Enemies/ogar.tscn" id="12_c4eb8"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_eogpp"]
size = Vector2(20, 437)

[sub_resource type="Shader" id="Shader_h37th"]
code = "/*
Shader from Godot Shaders - the free shader library.

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.

Optimised and packed by @c64cosmin
If you do use this please share it with me
Would love to see what you're making with it <3

It's a combination of these two shaders
~godotshaders.com/shader/VHS-and-CRT-monitor-effect
godotshaders.com/shader/crt-shader-with-realistic-blurring/

CRT grille and rolling lines made by @c64cosmin
Vignette and warping effect was made by pend00
Scanlines are from \"TimothyLottes\" FROM SHADERTOY
Then ported by AHOPNESS (@ahopness)
https://www.shadertoy.com/view/MsjXzh
*/

shader_type canvas_item;

uniform sampler2D SCREEN_TEXTURE: hint_screen_texture;

uniform vec2 resolution = vec2(320.0, 180.0);

uniform float scan_line_amount :hint_range(0.0, 1.0) = 1.0;
uniform float warp_amount :hint_range(0.0, 5.0) = 0.1;
uniform float noise_amount :hint_range(0.0, 0.3) = 0.03;
uniform float interference_amount :hint_range(0.0, 1.0) = 0.2;
uniform float grille_amount :hint_range(0.0, 1.0) = 0.1;
uniform float grille_size :hint_range(1.0, 5.0) = 1.0;
uniform float vignette_amount :hint_range(0.0, 2.0) = 0.6;
uniform float vignette_intensity : hint_range(0.0, 1.0) = 0.4;
uniform float aberation_amount :hint_range(0.0, 1.0) = 0.5;
uniform float roll_line_amount :hint_range(0.0, 1.0) = 0.3;
uniform float roll_speed :hint_range(-8.0, 8.0) = 1.0;
uniform float scan_line_strength :hint_range(-12.0, -1.0) = -8.0;
uniform float pixel_strength :hint_range(-4.0, 0.0) = -2.0;

float random(vec2 uv){
    return fract(cos(uv.x * 83.4827 + uv.y * 92.2842) * 43758.5453123);
}

vec3 fetch_pixel(vec2 uv, vec2 off){
	vec2 pos = floor(uv * resolution + off) / resolution + vec2(0.5) / resolution;

	float noise = 0.0;
	if(noise_amount > 0.0){
		noise = random(pos + fract(TIME)) * noise_amount;
	}

	if(max(abs(pos.x - 0.5), abs(pos.y - 0.5)) > 0.5){
		return vec3(0.0, 0.0, 0.0);
	}

	vec3 clr = texture(SCREEN_TEXTURE , pos, -16.0).rgb + noise;
	return clr;
}

// Distance in emulated pixels to nearest texel.
vec2 Dist(vec2 pos){ 
	pos = pos * resolution;
	return - ((pos - floor(pos)) - vec2(0.5));
}
    
// 1D Gaussian.
float Gaus(float pos, float scale){ return exp2(scale * pos * pos); }

// 3-tap Gaussian filter along horz line.
vec3 Horz3(vec2 pos, float off){
	vec3 b = fetch_pixel(pos, vec2(-1.0, off));
	vec3 c = fetch_pixel(pos, vec2( 0.0, off));
	vec3 d = fetch_pixel(pos, vec2( 1.0, off));
	float dst = Dist(pos).x;
	
	// Convert distance to weight.
	float scale = pixel_strength;
	float wb = Gaus(dst - 1.0, scale);
	float wc = Gaus(dst + 0.0, scale);
	float wd = Gaus(dst + 1.0, scale);
	
	// Return filtered sample.
	return (b * wb + c * wc + d * wd) / (wb + wc + wd);
}

// Return scanline weight.
float Scan(vec2 pos, float off){
	float dst = Dist(pos).y;
	
	return Gaus(dst + off, scan_line_strength);
}

// Allow nearest three lines to effect pixel.
vec3 Tri(vec2 pos){
	vec3 clr = fetch_pixel(pos, vec2(0.0));
	if(scan_line_amount > 0.0){
		vec3 a = Horz3(pos,-1.0);
		vec3 b = Horz3(pos, 0.0);
		vec3 c = Horz3(pos, 1.0);

		float wa = Scan(pos,-1.0);
		float wb = Scan(pos, 0.0);
		float wc = Scan(pos, 1.0);

		vec3 scanlines = a * wa + b * wb + c * wc;
		clr = mix(clr, scanlines, scan_line_amount);
	}
	return clr;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	vec2 warped = uv + delta * delta_offset;
	return (warped - 0.5) / mix(1.0,1.2,warp_amount/5.0) + 0.5;
}

float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_amount);
}

float floating_mod(float a, float b){
	return a - b * floor(a/b);
}

vec3 grille(vec2 uv){
	float unit = PI / 3.0;
	float scale = 2.0*unit/grille_size;
	float r = smoothstep(0.5, 0.8, cos(uv.x*scale - unit));
	float g = smoothstep(0.5, 0.8, cos(uv.x*scale + unit));
	float b = smoothstep(0.5, 0.8, cos(uv.x*scale + 3.0*unit));
	return mix(vec3(1.0), vec3(r,g,b), grille_amount);
}

float roll_line(vec2 uv){
	float x = uv.y * 3.0 - TIME * roll_speed;
	float f = cos(x) * cos(x * 2.35 + 1.1) * cos(x * 4.45 + 2.3);
	float roll_line = smoothstep(0.5, 0.9, f);
	return roll_line * roll_line_amount;
}

void fragment(){
	vec2 pix = FRAGCOORD.xy;
	vec2 pos = warp(SCREEN_UV);
	
	float line = 0.0;
	if(roll_line_amount > 0.0){
		line = roll_line(pos);
	}

	vec2 sq_pix = floor(pos * resolution) / resolution + vec2(0.5) / resolution;
	if(interference_amount + roll_line_amount > 0.0){
		float interference = random(sq_pix.yy + fract(TIME));
		pos.x += (interference * (interference_amount + line * 6.0)) / resolution.x;
	}

	vec3 clr = Tri(pos);
	if(aberation_amount > 0.0){
		float chromatic = aberation_amount + line * 2.0;
		vec2 chromatic_x = vec2(chromatic,0.0) / resolution.x;
		vec2 chromatic_y = vec2(0.0, chromatic/2.0) / resolution.y;
		float r = Tri(pos - chromatic_x).r;
		float g = Tri(pos + chromatic_y).g;
		float b = Tri(pos + chromatic_x).b;
		clr = vec3(r,g,b);
	}
	
	if(grille_amount > 0.0)clr *= grille(pix);
	clr *= 1.0 + scan_line_amount * 0.6 + line * 3.0 + grille_amount * 2.0;
	if(vignette_amount > 0.0)clr *= vignette(pos);
	
	COLOR.rgb = clr;
	COLOR.a = 1.0;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_rcw8j"]
shader = SubResource("Shader_h37th")
shader_parameter/resolution = Vector2(960, 540)
shader_parameter/scan_line_amount = 1.0
shader_parameter/warp_amount = 0.26
shader_parameter/noise_amount = 0.0
shader_parameter/interference_amount = 0.0
shader_parameter/grille_amount = 0.1
shader_parameter/grille_size = 1.708
shader_parameter/vignette_amount = 2.0
shader_parameter/vignette_intensity = 0.285
shader_parameter/aberation_amount = 0.104
shader_parameter/roll_line_amount = 0.0
shader_parameter/roll_speed = 8.0
shader_parameter/scan_line_strength = -6.261
shader_parameter/pixel_strength = -4.0

[node name="Room" type="Node2D" groups=["Room"]]
script = ExtResource("1_3m351")
roomConfig = ExtResource("2_je40i")
door = ExtResource("3_nixdo")

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2(970, 545)

[node name="HealthUI" parent="." instance=ExtResource("3_6gwo6")]
z_index = 50
offset_left = -1.0
offset_top = 996.0
offset_right = -1.0
offset_bottom = 996.0

[node name="Spawner" type="Node" parent="." node_paths=PackedStringArray("enemyFolder")]
script = ExtResource("2_qi222")
enemyFolder = NodePath("../Enemies")

[node name="EnemyBuilder" type="Node" parent="Spawner"]
script = ExtResource("3_ot5rb")

[node name="WaveTimeout" type="Timer" parent="Spawner"]

[node name="Bg" type="Sprite2D" parent="."]
position = Vector2(964.366, 543)
scale = Vector2(0.603334, 0.603334)
texture = ExtResource("5_32dm8")

[node name="Enemies" type="Node2D" parent="."]

[node name="StaticBody2D" type="StaticBody2D" parent="."]
position = Vector2(571, 539)
scale = Vector2(2.04155, 2.04155)
collision_layer = 4
collision_mask = 3

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2(-1, 16.5)
shape = SubResource("RectangleShape2D_eogpp")

[node name="CollisionShape2D2" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2(411, 17)
shape = SubResource("RectangleShape2D_eogpp")

[node name="CollisionShape2D3" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2(202, -196)
rotation = 1.5708
shape = SubResource("RectangleShape2D_eogpp")

[node name="CollisionShape2D4" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2(202, 222)
rotation = 1.5708
shape = SubResource("RectangleShape2D_eogpp")

[node name="Player" parent="." instance=ExtResource("6_w54wr")]
position = Vector2(1007, 595)
scale = Vector2(2.97134, 2.97134)

[node name="RoomStart" type="Node2D" parent="."]
position = Vector2(592, 162)

[node name="RoomEnd" type="Node2D" parent="."]
position = Vector2(1388, 958)

[node name="RoomSerializer" parent="." instance=ExtResource("9_ltcgh")]
process_mode = 4
configName = "Test1"

[node name="WaveSerializer" parent="RoomSerializer" instance=ExtResource("7_huvsm")]
visible = false
waveTimeout = 0.5

[node name="Enemy" parent="RoomSerializer/WaveSerializer" instance=ExtResource("11_titot")]
position = Vector2(1000, 315)

[node name="WaveSerializer2" parent="RoomSerializer" instance=ExtResource("7_huvsm")]
visible = false
waveTimeout = 0.5

[node name="Enemy" parent="RoomSerializer/WaveSerializer2" instance=ExtResource("11_titot")]
position = Vector2(1191, 403)

[node name="WaveSerializer3" parent="RoomSerializer" instance=ExtResource("7_huvsm")]
visible = false
waveTimeout = 0.5

[node name="Enemy" parent="RoomSerializer/WaveSerializer3" instance=ExtResource("11_titot")]
position = Vector2(1271, 614)

[node name="WaveSerializer4" parent="RoomSerializer" instance=ExtResource("7_huvsm")]
visible = false
waveTimeout = 0.5

[node name="Enemy" parent="RoomSerializer/WaveSerializer4" instance=ExtResource("11_titot")]
position = Vector2(1208, 812)

[node name="WaveSerializer5" parent="RoomSerializer" instance=ExtResource("7_huvsm")]
visible = false
waveTimeout = 0.5

[node name="Enemy" parent="RoomSerializer/WaveSerializer5" instance=ExtResource("11_titot")]
position = Vector2(996, 887)

[node name="WaveSerializer6" parent="RoomSerializer" instance=ExtResource("7_huvsm")]
visible = false
waveTimeout = 0.5

[node name="Enemy" parent="RoomSerializer/WaveSerializer6" instance=ExtResource("11_titot")]
position = Vector2(773, 809)

[node name="WaveSerializer7" parent="RoomSerializer" instance=ExtResource("7_huvsm")]
visible = false
waveTimeout = 0.5

[node name="Enemy" parent="RoomSerializer/WaveSerializer7" instance=ExtResource("11_titot")]
position = Vector2(710, 599)

[node name="WaveSerializer8" parent="RoomSerializer" instance=ExtResource("7_huvsm")]
visible = false
waveTimeout = 15.0

[node name="Enemy" parent="RoomSerializer/WaveSerializer8" instance=ExtResource("11_titot")]
position = Vector2(791, 393)

[node name="WaveSerializer9" parent="RoomSerializer" instance=ExtResource("7_huvsm")]
visible = false

[node name="RunnerGnome" parent="RoomSerializer/WaveSerializer9" instance=ExtResource("11_uesty")]
position = Vector2(628, 214)

[node name="RunnerGnome2" parent="RoomSerializer/WaveSerializer9" instance=ExtResource("11_uesty")]
position = Vector2(1342, 925)

[node name="WaveSerializer10" parent="RoomSerializer" instance=ExtResource("7_huvsm")]
visible = false

[node name="RunnerGnome" parent="RoomSerializer/WaveSerializer10" instance=ExtResource("11_uesty")]
position = Vector2(1351, 210)

[node name="RunnerGnome2" parent="RoomSerializer/WaveSerializer10" instance=ExtResource("11_uesty")]
position = Vector2(627, 928)

[node name="WaveSerializer11" parent="RoomSerializer" instance=ExtResource("7_huvsm")]

[node name="Ogar" parent="RoomSerializer/WaveSerializer11" instance=ExtResource("12_c4eb8")]
position = Vector2(976, 575)

[node name="ShamanGnome" parent="RoomSerializer/WaveSerializer11" instance=ExtResource("10_ovxqh")]
position = Vector2(1300, 731)

[node name="ShamanGnome2" parent="RoomSerializer/WaveSerializer11" instance=ExtResource("10_ovxqh")]
position = Vector2(641, 430)

[node name="ColorRect" type="ColorRect" parent="."]
visible = false
z_index = 500
material = SubResource("ShaderMaterial_rcw8j")
offset_left = 4.0
offset_right = 1931.0
offset_bottom = 1086.0
metadata/_edit_lock_ = true
